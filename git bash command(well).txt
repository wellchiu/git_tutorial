git --version
diff -u a.txt b.txt | less -N
cp hello world
patch -R hello < diff.txt
git add -u
git commit
git push
git pull mirror master
git push home
git pull home master
git pull
git init
git add -A
git commit -m "initialized"
git tag v1
git commit -a
git format-patch v1..HEAD
git send-email *.patch
git commit --amend
git rebase -i <commit-id>^
git rm --cached winxp.img
git commit --amend
git stash
git checkout new_branch
git checkout master
git stash pop
git log | less
git -p status
git config --global pager.status true
git config --global core.pager 'less -+$LESS -FRX'
ls -ld /c/Windows
set completion-ignore-case on
disable/enable 8bit input
echo 您好
expore LESSCHARSET=utf-8
echo 你好 | less
echo 你好 > 你好.txt
cat \*.txt
git config --system core.quotepath false
git status -s
git --version
git config --global user.name "Jiang Xin"
git config --global user.email jiangxin@ossxp.com
git config --global alias.st status
git config --global alias.ci "commit -s"
git config --global alias.co checkout
git config --global alias.br branch
cd /path/to/my/workspace
git init demo
cd demo
ls -aF
echo "Hello." > welcome.txt
git add welcome.txt
git ci -m "initialized"
git grep "ello"
cd /path/to/my/workspace/
git status
strace -e 'trace=file' git status
cd /path/to/my/workspace/demo/
mkdir -p a/b/c
cd /path/to/my/workspace/demo/a/b/c
git rev-parse --git-dir
git rev-parse --show-toplevel
git rev-parse --show-prefix
git rev-parse --show-cdup
cd /path/to/my/workspace/demo/
git config -e
git config -e --global
git config -e --system
cat /path/to/my/workspace/demo/.git/config
git config core.bare
git config a.b something
git config x.y.z others
GIT_CONFIG=test.ini git config a.b.c.d "hello, world"
GIT_CONFIG=test.ini git config a.b.c.d
git config --unset --global user.name
git config --unset --global user.email
git commit --allow-empty -m "who does commit?"
git log --pretty=fuller
git config --global user.name "Jiang Xin"
git config --global user.email jiangxin@ossxp.com
git commit --amend --allow-empty --reset-author
git log --pretty=fuller
git push origin master
cd /path/to/my/workspace
git clone demo demo-step-1
cd /path/to/my/workspace/demo
git log --stat
echo "Nice to meet you." >> welcome.txt
git diff
git commit -m "Append a nice line."
git log --pretty=oneline
git status -s
git add welcome.txt
git diff
git diff HEAD
git status
git status -s
echo "Bye-Bye." >> welcome.txt
git status
git status -s
git diff
git diff HEAD
git diff --cached
git commit -m "which version checked in?"
git log --pretty=oneline
git status -s
git diff
git checkout -- welcome.txt
git status -sls --full-time .git/index
git status -sls --full-time .git/index
touch welcome.txt
git status -sls --full-time .git/index
git ls-tree -l HEAD
cd /path/to/my/workspace/demo
git clean -fd
git checkout .
echo "Bye-Bye." >> welcome.txt
mkdir -p a/b/c
echo "Hello." > a/b/c/hello.txt
git add .
echo "Bye-Bye." >> a/b/c/hello.txt
git status -s
find . -path ./.git -prune -o -type f -printf "%-20p\t%s\n"
git ls-files -s
git write-tree
git write-tree | xargs git ls-tree -l -r -t
git diff
git diff --cached
git diff HEAD
git status
git stash
git status
git log -1 --pretty=raw
git cat-file -t e695606
git cat-file -p e695606
for id in e695606 f58da9a a0c641e fd3c069; do \
  ls .git/objects/${id:0:2}/${id:2}*; done
git log --pretty=raw --graph e695606
git status -s -b
git branch
git log -1 HEAD
git log -1 master
git log -1 refs/heads/master
find .git -name HEAD -o -name master
cat .git/HEAD
cat .git/refs/heads/master
git rev-parse master
echo -n Git |sha1sum
git cat-file commit HEAD
git cat-file commit HEAD | wc -c
( printf "commit 234\000"; git cat-file commit HEAD ) | sha1sum
git rev-parse HEAD
git cat-file blob HEAD:welcome.txt
git cat-file blob HEAD:welcome.txt | wc -c
( printf "blob 25\000"; git cat-file blob HEAD:welcome.txt ) | sha1sum
git rev-parse HEAD:welcome.txt
git cat-file tree HEAD^{tree} | wc -c
( printf "tree 39\000"; git cat-file tree HEAD^{tree} ) | sha1sum
git rev-parse HEAD^{tree}
hg log --limit 2
git rev-parse HEAD
git cat-file -p e695
git cat-file -p e695^
git rev-parse e695^{tree}
git rev-parse e695^^{tree}
cat .git/refs/heads/master
git log --graph --oneline
touch new-commit.txt
git add new-commit.txt
git commit -m "does master follow this new commit?"
ls
cat .git/refs/heads/master
git log --graph --oneline
git reset --hard HEAD^
cat .git/refs/heads/master
ls
git log --graph --oneline
git reset --hard 9e8a761
cat welcome.txt
git log
git config core.logallrefupdates
tail -5 .git/logs/refs/heads/master
git reflog show master | head -5
git reset --hard master@{2}
ls
git log --oneline
git reflog show master | head -5
git reset --soft HEAD^
git commit -e -F .git/COMMIT_EDITMSG
cat .git/HEAD
git branch -v
git checkout 4902dc3^
cat .git/HEAD
git reflog -1
git rev-parse HEAD master
touch detached-commit.txt
git add detached-commit.txt
git status
git commit -m "commit in detached HEAD mode."
cat .git/HEAD
git log --graph --pretty=oneline
git checkout master
cat .git/HEAD
ls
git log --graph --pretty=oneline
git show acc2f69
git branch -v
git merge acc2f69
ls
git log --graph --pretty=oneline
git cat-file -p HEAD
cd /path/to/my/workspace/demo
git status -sb
git log --graph --pretty=oneline --stat
git stash list
git stash pop
git status
git commit -m "add new file: a/b/c/hello.txt, but leave welcome.txt alone."
git status -s
git reset --soft HEAD^
git log -1 --pretty=oneline
git status -s
git add welcome.txt
git status -s
git reset HEAD a/b/c
git status -s
git reset
git checkout -- welcome.txt
git status
git clean -nd
git clean -fd
git status -s
git --exec-path
ls /usr/lib/git-core/
file /usr/lib/git-core/git-stash
git stash list
echo Bye-Bye. >> welcome.txt
echo hello. > hack-1.txt
git add hack-1.txt
git status -s
git stash save "hack-1: hacked welcome.txt, newfile hack-1.txt"
git status -s
ls
echo fix. > hack-2.txt
git stash
git add hack-2.txt
git stash
git stash list
ls -l .git/refs/stash .git/logs/refs/stash
git reflog show refs/stash
git log --graph --pretty=raw  refs/stash -2
git log --graph --pretty=raw  stash@{1} -3
git diff stash@{1}^2^ stash@{1}^2
git diff stash@{1}^2 stash@{1}
git diff stash@{1}^1 stash@{1}
git stash apply stash@{1}
git stash list
ls -l .git/refs/stash .git/logs/refs/stash

寫到 https://www.worldhello.net/gotgit/02-git-solo/070-git-basic.html 的開頭
